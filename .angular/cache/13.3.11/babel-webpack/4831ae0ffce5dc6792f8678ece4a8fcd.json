{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserPerformanceClient, _super);\n\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    } // Clean up remaining marks for incomplete sub-measurements\n\n\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n\n\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this; // Capture page visibilityState and then invoke start/end measurement\n\n\n    var startPageVisibility = this.getPageVisibility();\n\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n\n    if (!preQueueTime) {\n      return;\n    }\n\n    var currentTime = window.performance.now();\n\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n\n  return BrowserPerformanceClient;\n}(PerformanceClient);\n\nexport { BrowserPerformanceClient }; //# sourceMappingURL=BrowserPerformanceClient.js.map","map":null,"metadata":{},"sourceType":"module"}